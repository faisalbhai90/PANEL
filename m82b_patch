using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

public static async Task Run(dynamic mem, dynamic PID)
{
    Stopwatch stopwatch = new Stopwatch();
    stopwatch.Start();

    PID.Invoke((MethodInvoker)(() => PID.Text = "ᴀᴘᴘʟʏɪɴɢ M82B ꜰᴀꜱᴛ ꜱᴡɪᴛᴄʜ"));

    try
    {
        var procs = Process.GetProcessesByName("HD-Player");
        if (procs.Length == 0)
        {
            PID.Invoke((MethodInvoker)(() => PID.Text = "Emulator not found"));
            return;
        }
        int procId = procs[0].Id;
        mem.OpenProcess(procId);

        string searchPattern = "99 3E 00 00 00 00 00 00 5C 43 00 00 28 42 00 00 B4 42 78 00 00 00 00 00 00 00 9A 99 19 3F 00 00 80 3E 00 00 00 00 04 00 00 00 00 00 80 3F 00 00 20 41 00 00 34 42 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 9A 99 19 3F CD CC 8C 3F 00 00 80 3F 00 00 00 00 66 66 66 3F 00 00 80 3F 00 00 80 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 00 00 01 00 00";

        var resultList = (await mem.AoBScan(searchPattern)).ToList();
        if (resultList.Any() && resultList.Count < 2)
        {
            foreach (var CurrentAddress in resultList)
            {
                mem.WriteMemory(CurrentAddress.ToString("X"), "bytes",
                    "99 3E 00 00 00 00 00 00 5C 43 00 00 28 42 00 00 B4 42 78 00 00 00 00 00 00 00 9A 99 19 1B 00 00 80 10 00 00 00 00 04 00 00 00 00 00 80 3F 00 00 20 41 00 00 34 42 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 9A 99 19 3F CD CC 8C 3F 00 00 80 3F 00 00 00 00 66 66 66 3F 00 00 80 3F 00 00 80 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3F 00 00 80 3F 00 00 80 3F 00 00 00 00 01 00 00");
            }

            stopwatch.Stop();
            double elapsed = stopwatch.Elapsed.TotalSeconds;
            PID.Invoke((MethodInvoker)(() => PID.Text = $"M82B ꜰᴀꜱᴛ ꜱᴡɪᴛᴄʜ = ᴏɴ, ᴛɪᴍᴇ: {elapsed:F2} sec"));
        }
        else if (resultList.Count >= 2)
        {
            MessageBox.Show("THIS CODE IS PATCHED.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
        else
        {
            PID.Invoke((MethodInvoker)(() => PID.Text = "ERROR - Pattern Not Found"));
        }
    }
    catch (Exception ex)
    {
        string message = ex.InnerException?.Message ?? ex.Message;
        MessageBox.Show("Error: " + message);
    }
}
